import fin.filesystem

class State
    var name Str
    var transitions Map<Char, State&>

    def new(name Str) State static
        return State {
            name: name
            transitions: .new()
        }

    def trans(chars Iter<Char>, tar State&)
        chars.each() {
            transitions[$] := tar
        }

class Token
    var type Str
    var value Str

class Lexer
    var ALPHA = 'a'..'z' | 'A'..'Z'
    var NUM = '0'..'9'

    var start State
    var types Dict<Str>
    var keywords Dict<Str>

    def new(syn File) Lexer

    def init()
        let start = State.new("start")
        let id = State.new("id")

        start.trans(ALPHA, id)

        @start = start
