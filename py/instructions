error=0
    Crash the runtime environment.

cookie=35
    With opcode equal to `#`, this instruction will skip until past EOL, and is
    used for shebang at the start of the program. This also allows comments
    embedded in the binary.

lib name:str
    Declare new module, and set declaring module to this module.

fn name:str gens:int ctrs:int begin:tar end:tar
    Declare function `name` of declaring module.

type name:str gens:int end:tar

member name:str

ref_lib name:str
    Set referencing module.

ref_fn name:str
    Add function `name` of referencing module to list of references of declaring
    module.

ref_type name:str

size_i

size_f

size_b

size_p

size_dup type:sz

size_arr length:int

type_call type:tp

type_ret

type_mem member:mem

param size:sz

local size:sz

reset slot:off

contract function:fn

sign

call fn:ctr

term
    Stop program execution. Automatically added to the end of every module.

end
    Return from the current function.

ret size:sz
    Return from the current function with a return value.

push size:sz

pop size:sz

dup size:sz

load size:sz
    Load value of pointer onto stack.

store size:sz
    Store value from stack to pointer.

load_var slot:off size:sz

store_var slot:off size:sz

addr_off size:sz

addr_arg slot:off

addr_var slot:off

addr_mem slot:off

br offset:tar
    Unconditionally branch to `pc + offset`, where pc is at the end of the
    instruction.

br_false offset:tar
    Pop boolean from stack and branch if false.

br_true offset:tar
    Pop boolean from stack and branch if true.

const_false
    Load constant false onto stack.

const_true
    Load constant true onto stack.

not
    Invert the boolean value on top of stack.

const_i value:i
    Load constant `value` onto stack.

add_i
    Pop two values from stack and push the sum.

sub_i
    Pop two values from stack and push the difference.

mult_i
    Pop two values from stack and push the product.

div_i
    Pop two values from stack and push the quotient.

mod_i
    Pop two values from stack and push the modulo.

neg_i
    Pop a value from stack and push the negation.

eq_i
    Pop two values from stack and push the boolean representing if they are
    equal.

ne_i
    Pop two values from stack and push the boolean representing if they are
    not equal.

lt_i
    Pop two values from stack and push the boolean representing if less than.

le_i
    Pop two values from stack and push the boolean representing if less than or
    equal to.

gt_i
    Pop two values from stack and push the boolean representing if greater than.

ge_i
    Pop two values from stack and push the boolean representing if greater than
    or equal to.

const_f value:f
    Load constant `value` onto stack.

add_f
    Pop two values from stack and push the sum.

sub_f
    Pop two values from stack and push the difference.

mult_f
    Pop two values from stack and push the product.

div_f
    Pop two values from stack and push the quotient.

mod_f
    Pop two values from stack and push the modulo.

neg_f
    Pop a value from stack and push the negation.

eq_f
    Pop two values from stack and push the boolean representing if they are
    equal.

ne_f
    Pop two values from stack and push the boolean representing if they are
    not equal.

lt_f
    Pop two values from stack and push the boolean representing if less than.

le_f
    Pop two values from stack and push the boolean representing if less than or
    equal to.

gt_f
    Pop two values from stack and push the boolean representing if greater than.

ge_f
    Pop two values from stack and push the boolean representing if greater than
    or equal to.

cast_i_f
    Convert int to float.

cast_f_i
    Convert float to int.
