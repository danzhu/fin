struct List
    content [Int]&
    size Int
    capacity Int

def new() List
    let list List
    list.size = 0
    list.capacity = 0
    list

def grow(list List&)
    let nonempty = list.capacity != 0

    if nonempty
        list.capacity *= 2
    else
        list.capacity = 5

    let content [Int]& := alloc(list.capacity)

    let i = 0
    while i < list.size
        content[i] = list.content[i]
        i += 1

    if nonempty
        dealloc(list.content)

    list.content := content

def append(list List&, val Int)
    if list.size == list.capacity
        list.grow()

    list.content[list.size] = val
    list.size += 1

def pop(list List&) Int
    list.size -= 1
    list.content[list.size]

def at(list List&, idx Int) Int&
    list.content[idx]

def drop(list List&)
    dealloc(list.content)

def test()
    let list List = new()

    let i = 0
    while i < 25
        list.append(i)
        i += 1

    list.pop().print()
    list.at(2).print()
    list.capacity.print()

    list.drop()

test()
