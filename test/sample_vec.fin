import rt


struct Vec{T}
    content &[T]
    size Int
    capacity Int


def new{T}(cap Int) Vec{T}
    Vec(rt:alloc(cap), 0, cap)


def push{T}(self &Vec{T}, item T)
    if self.size == self.capacity then
        self.capacity *= 2
        self.content = rt:realloc(self.content, self.capacity)

    self.content[self.size] = item
    self.size += 1


def pop{T}(self &Vec{T}) T
    rt:assert(self.size > 0)

    self.size -= 1
    self.content[self.size]


def subscript{T}(self &Vec{T}, idx Int) &T
    self.content[idx]


def drop{T}(self Vec{T})
    rt:dealloc(self.content, self.capacity)


def main()
    let v Vec{Int} = new(4)

    let i = 0
    while i < 100 do
        v.push(i)
        i += 1

    rt:assert(v[20] == 20)
    rt:assert(v.pop() == 99 and v.pop() == 98)

    v.drop()
