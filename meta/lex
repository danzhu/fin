> start [ALPHA] ID
> start 0 ZERO
> start 123456789 NUM
> start + ADD
> start - SUB
> start * MULT
> start / DIV
> start % MOD
> start = ASSN
> start & AMP
> start ! EXCL
> start : COLON
> start ( LPAREN
> start ) RPAREN
> start [ LBRACKET
> start ] RBRACKET
> start < LT
> start > GT
> start \ BACKSLASH
> start . DOT
> start , COMMA
> start [SPACE] start
> start # comment
> ID [ALPHA][NUM] ID
> SUB 0 neg_zero
> SUB 123456789 NUM
> ZERO . FLOAT
> neg_zero . FLOAT
> NUM . FLOAT
> NUM [NUM] NUM
> FLOAT [NUM] FLOAT
> ADD = ADD_ASSN
> SUB = SUB_ASSN
> MULT = MULT_ASSN
> DIV = DIV_ASSN
> MOD = MOD_ASSN
> ASSN = EQ
> EXCL = NE
> LT = LE
> GT = GE
> comment [ANY] comment
> comment [LF] start
type ZERO NUM
type ADD_ASSN INC_ASSN
type SUB_ASSN INC_ASSN
type MULT_ASSN INC_ASSN
type DIV_ASSN INC_ASSN
type MOD_ASSN INC_ASSN
type EQ COMP
type NE COMP
type GT COMP
type GE COMP
type LT COMP
type LE COMP
keyword import IMPORT
keyword struct STRUCT
keyword def DEF
keyword let LET
keyword if IF
keyword elif ELIF
keyword else ELSE
keyword while WHILE
keyword begin BEGIN
keyword return RETURN
keyword and AND
keyword or OR
keyword alloc ALLOC
keyword dealloc DEALLOC
