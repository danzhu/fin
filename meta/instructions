error=0
    Crash the runtime environment.

cookie=35
    With opcode equal to `#`, this instruction will skip until past EOL, and is
    used for shebang at the start of the program. This also allows comments
    embedded in the binary.

module name:s
    Declare new module, and set declaring module to this module.

function name:s skip:I
    Declare function `name` of declaring module.

ref_module name:s
    Set referencing module.

ref_function name:s
    Add function `name` of referencing module to list of references of declaring
    module.

call fn:r argSize:H
    Call function `fn` of references in executing module.

return
    Return from the current function.

term
    Stop program execution. Automatically added to the end of every module.

br offset:h
    Unconditionally branch to `pc + offset`, where pc is at the end of the
    instruction.

br_false offset:h
    Pop boolean from stack and branch if false.

br_true offset:h
    Pop boolean from stack and branch if true.

alloc
    Pop int from stack, allocate that many bytes of heap memory, and push
    pointer onto stack.

dealloc
    Pop pointer from stack and deallocate memory used by that pointer.

push amount:H
    Push `amount` bytes onto stack.

pop amount:H
    Pop `amount` bytes from stack.

load_arg offset:h size:H
    Load value on frame at `offset` onto stack.

store_arg offset:h size:H
    Store value to frame at `offset` from stack.

load_ptr offset:I size:H
    Load value of pointer onto stack.

store_ptr offset:I size:H
    Store value from stack to pointer.

addr_frame offset:h
    Load address of frame at `offset` onto stack.

addr_glob offset:H
    Load address of global at `offset` onto stack.

return_val size:H
    Return from function with a return value.

const_false
    Load constant false onto stack.

const_true
    Load constant true onto stack.

const_i value:i
    Load constant `value` onto stack.

add_i
    Pop two values from stack and push the sum.

sub_i
    Pop two values from stack and push the difference.

mult_i
    Pop two values from stack and push the product.

div_i
    Pop two values from stack and push the quotient.

mod_i
    Pop two values from stack and push the modulo.

neg_i
    Pop a value from stack and push the negation.

eq_i
    Pop two values from stack and push the boolean representing if they are
    equal.

ne_i
    Pop two values from stack and push the boolean representing if they are
    not equal.

lt_i
    Pop two values from stack and push the boolean representing if less than.

le_i
    Pop two values from stack and push the boolean representing if less than or
    equal to.

gt_i
    Pop two values from stack and push the boolean representing if greater than.

ge_i
    Pop two values from stack and push the boolean representing if greater than
    or equal to.

const_f value:f
    Load constant `value` onto stack.

add_f
    Pop two values from stack and push the sum.

sub_f
    Pop two values from stack and push the difference.

mult_f
    Pop two values from stack and push the product.

div_f
    Pop two values from stack and push the quotient.

mod_f
    Pop two values from stack and push the modulo.

neg_f
    Pop a value from stack and push the negation.

eq_f
    Pop two values from stack and push the boolean representing if they are
    equal.

ne_f
    Pop two values from stack and push the boolean representing if they are
    not equal.

lt_f
    Pop two values from stack and push the boolean representing if less than.

le_f
    Pop two values from stack and push the boolean representing if less than or
    equal to.

gt_f
    Pop two values from stack and push the boolean representing if greater than.

ge_f
    Pop two values from stack and push the boolean representing if greater than
    or equal to.
