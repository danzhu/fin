error=0
    Crash the runtime environment.

cookie=35
    With opcode equal to `#`, this instruction will skip until past EOL, and is
    used for shebang at the start of the program. This also allows comments
    embedded in the binary.

module name:s
    Declare new module, and set declaring module to this module.

method name:s argSize:H skip:I
    Declare method `name` of declaring module.

ref_module name:s
    Add module reference.

ref_method name:s
    Add method `name` to list of references of declaring module.

call index:H
    Call method at `index` of references in executing module.

return
    Return from the current method.

term
    Stop program execution. Automatically added to the end of every module.

br offset:h
    Unconditionally branch to `pc + offset`, where pc is at the end of the
    instruction.

br_false offset:h
    Pop boolean from stack and branch if false.

br_true offset:h
    Pop boolean from stack and branch if true.

alloc
    Pop int from stack, allocate that many bytes of heap memory, and push
    pointer onto stack.

dealloc
    Pop pointer from stack and deallocate memory used by that pointer.

push amount:H
    Push `amount` bytes onto stack.

pop amount:H
    Pop `amount` bytes from stack.

load_arg_4 offset:h
    Load value on frame at `offset` onto stack.

store_arg_4 offset:h
    Store value to frame at `offset` from stack.

load_ptr_4 offset:H
    Load value of pointer onto stack.

store_ptr_4 offset:H
    Store value from stack to pointer.

return_4
    Return from method with a return value.

const_i value:i
    Load constant `value` onto stack.

add_i
    Pop two values from stack and push the sum.

sub_i
    Pop two values from stack and push the difference.

mult_i
    Pop two values from stack and push the product.

div_i
    Pop two values from stack and push the quotient.

mod_i
    Pop two values from stack and push the modulo.

eq_i
    Pop two values from stack and push the boolean representing if they are
    equal.

ne_i
    Pop two values from stack and push the boolean representing if they are
    not equal.

lt_i
    Pop two values from stack and push the boolean representing if less than.

le_i
    Pop two values from stack and push the boolean representing if less than or
    equal to.

gt_i
    Pop two values from stack and push the boolean representing if greater than.

ge_i
    Pop two values from stack and push the boolean representing if greater than
    or equal to.
